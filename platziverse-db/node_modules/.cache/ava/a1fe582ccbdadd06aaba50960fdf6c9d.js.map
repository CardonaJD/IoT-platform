{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","proxyquire","sinon","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","hasmany","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,MAAM,GAAG;AACTC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADb,CAAb;AAIA,IAAIC,UAAU,GAAG;AACbC,EAAAA,SAAS,EAAEJ,KAAK,CAACK,GAAN;AADE,CAAjB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAX,IAAI,CAACY,UAAL,CAAgB,YAAW;AACvBD,EAAAA,OAAO,GAAGR,KAAK,CAACQ,OAAhB;AACAF,EAAAA,SAAS,GAAG;AACRI,IAAAA,OAAO,EAAEF,OAAO,CAACH,GAAR;AADD,GAAZ;AAIA,QAAMM,aAAa,GAAGZ,UAAU,CAAC,KAAD,EAAQ;AACpC,sBAAkB,MAAMO,SADY;AAEpC,uBAAmB,MAAMH;AAFW,GAAR,CAAhC;AAKAI,EAAAA,EAAE,GAAG,MAAMI,aAAa,CAACV,MAAD,CAAxB;AACH,CAZD;AAcAJ,IAAI,CAACe,SAAL,CAAe,MAAM;AACjBJ,EAAAA,OAAO,IAAIR,KAAK,CAACQ,OAAN,CAAcK,OAAd,EAAX;AACH,CAFD;AAIAhB,IAAI,CAAC,OAAD,EAAUiB,CAAC,IAAI;AAAA;;AACfA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAAR,EAAE,uBAAF,CAAGS,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACH,CAFG,CAAJ;AAIAnB,IAAI,CAACoB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AAAA;AAAA;;AACtBA,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAZ,SAAS,8BAAT,CAAUa,OAAV,wBAAkBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,gCAAjC;AACAN,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAf,UAAU,8BAAV,CAAWC,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,6CAApC;AACH,CAHD","sourceRoot":"C:\\Users\\Jose David\\Desktop\\programacion\\PLATZI\\advancedNode\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst proxyquire = require('proxyquire')\r\nconst sinon = require('sinon')\r\n\r\nlet config = {\r\n    logging: function() {}\r\n}\r\n\r\nlet MetricStub = {\r\n    belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async() => {\r\n    sandbox = sinon.sandbox\r\n    AgentStub = {\r\n        hasMany: sandbox.spy()\r\n    }\r\n\r\n    const setupDatabase = proxyquire('../', {\r\n        './models/agent': () => AgentStub,\r\n        './models/metric': () => MetricStub\r\n    })\r\n\r\n    db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n    sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n    t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasmany.called, 'AgentMode.hasmany was executed')\r\n    t.true(MetricStub.belongsTo.called, 'AgentMode.MetricStub.belongsTo was executed')\r\n})"]}