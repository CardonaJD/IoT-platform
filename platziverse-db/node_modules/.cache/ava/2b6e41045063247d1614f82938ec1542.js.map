{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual","byId"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAII,MAAM,GAAG;AACTC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADb,CAAb;AAIA,IAAIC,UAAU,GAAG;AACbC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADE,CAAjB;AAIA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAb;AACA,IAAIG,EAAE,GAAG,CAAT;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAhB,IAAI,CAACiB,UAAL,CAAgB,YAAW;AACvBD,EAAAA,OAAO,GAAGd,KAAK,CAACgB,aAAN,EAAV;AACAJ,EAAAA,SAAS,GAAG;AACRK,IAAAA,OAAO,EAAEH,OAAO,CAACP,GAAR;AADD,GAAZ;AAIA,QAAMW,aAAa,GAAGjB,UAAU,CAAC,KAAD,EAAQ;AACpC,sBAAkB,MAAMW,SADY;AAEpC,uBAAmB,MAAMP;AAFW,GAAR,CAAhC;AAKAQ,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACf,MAAD,CAAxB;AACH,CAZD;AAcAL,IAAI,CAACqB,SAAL,CAAe,MAAM;AACjBL,EAAAA,OAAO,IAAIA,OAAO,CAACM,OAAR,EAAX;AACH,CAFD;AAIAtB,IAAI,CAAC,OAAD,EAAUuB,CAAC,IAAI;AAAA;;AACfA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAAT,EAAE,uBAAF,CAAGU,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACH,CAFG,CAAJ;AAIAzB,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AAAA;AAAA;AAAA;AAAA;;AACtBA,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAb,SAAS,8BAAT,CAAUK,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAb,SAAS,qCAAT,CAAUK,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,qCAAjD;AACAgB,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAApB,UAAU,8BAAV,CAAWC,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAApB,UAAU,qCAAV,CAAWC,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,wCAAnD;AACH,CALD;AAOAd,IAAI,CAAC0B,MAAL,CAAY,eAAZ,EAA6B,MAAMH,CAAN,IAAW;AACpC,MAAIO,KAAK,GAAG,MAAMf,EAAE,CAACU,KAAH,CAASM,QAAT,CAAkBlB,EAAlB,CAAlB;AAEAU,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmB1B,aAAa,CAAC6B,IAAd,CAAmBpB,EAAnB,CAAnB,EAA2C,oBAA3C;AACH,CAJD","sourceRoot":"C:\\Users\\Jose David\\Desktop\\programacion\\PLATZI\\advancedNode\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n    logging: function() {}\r\n}\r\n\r\nlet MetricStub = {\r\n    belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async() => {\r\n    sandbox = sinon.createSandbox()\r\n    AgentStub = {\r\n        hasMany: sandbox.spy()\r\n    }\r\n\r\n    const setupDatabase = proxyquire('../', {\r\n        './models/agent': () => AgentStub,\r\n        './models/metric': () => MetricStub\r\n    })\r\n\r\n    db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n    sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n    t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Arguments should be the MetricModel')\r\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Arguments should be the the Agentmodel')\r\n})\r\n\r\ntest.serial('AgentFindByID', async t => {\r\n    let agent = await db.Agent.findById(id)\r\n\r\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})"]}